Ce dépôt contient des tests automatisés pour le tableur de Projet 2.

Pour partager vos tests, mettez vos fichiers dans un répertoire à votre nom (ou
celui de votre binôme) et indiquez dans ce fichier les instructions à suivre
pour effectuer les tests.

Si vous voulez tester votre programme, lancez le set de quelqu'un en suivant
ses instructions.



# michelland

Les tests sont indépendants ; chaque test est réussi si et seulement si le
script n'affiche que des 0 (ou des _).

J'ai besoin de nombres négatifs pour ça. Vous pouvez les ajouter en modifiant
un tout petit peu lexer.mll, en rajoutant '-'? (ie. "signe - optionnel") devant
les expressions pour les constantes :

	| '-'? ['0'-'9']+ '.' ['0'-'9']* as s { NBR (float_of_string s) }
	| '-'? ['0'-'9']+ as s { INT (int_of_string s) }

# coudert--osmont

deux mots
Les test sont associés à leurs fichiers réponses.
Lorsqu'un cycle est crée une ligne de la forme
PAF :  <INSTRUCTION>  skipped
est écrite

# boone--pauvert

Les tests sont indépendants.
Testing AVG.txt    : 	Teste AVERAGE
Testing colon.txt  :    Teste l'implémentation de ':'
Testing coord.txt  :    Teste l'extension de votre système de coordonnées à plusieurs lettres
Testing cycle.txt  :    Vérifie que vous ignorez des commandes si elles sont cycliques - niveau 1 !
Testing dep.txt    :    Test primaire de vos dépendances
Testing flot2.txt  :    Vérifie que vous avez amélioré le parsing des flottants pour permettre plusieurs chiffres après la virgule
Testing flot-neg.txt :  Idem, vérifie que vous pouvez faire des flottants négatifs
Testing fun-parse.txt :   Vérifie que vos fonctions passent au parser
Testing fun-sum.txt :     Vérifie que vous gérer les dépendances correctement lors des appels de fonction
Testing MAX.txt    :      Teste MAX
Testing MULT.txt   :      Teste MULT
Testing nombre.txt :      Vérifie que vous pouvez effectivement parser de l'entier en INT et pas en FLOAT
Testing SUM.txt    :      Teste SUM
Testing switchTo.txt :    Vérifie le SwitchTo, et l'indépendance entre vos feuilles
Testing t1.txt     :      un des tests vanilla
Testing t2.txt     :      idem
Testing t3.txt     :      cat tests/t3.txt pour comprendre ce que c'est (j'ai oublié)
Testing update-ok.txt :   Vérifie que vous ignorez des commandes si elles sont cycliques - niveau 2 !

Utilisez auto_tests.sh
Les solutions sont dans le dossier solutions/

